{"version":3,"sources":["hooks/useColorScheme.ts","constants/Colors.ts","components/Themed.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/ModalScreen.tsx","screens/NotFoundScreen.tsx","navigation/LinkingConfiguration.ts","components/ChatListItem/style.ts","components/ChatListItem/index.tsx","components/ContactsButton/styles.ts","components/ContactsButton/index.tsx","screens/ChatScreen.tsx","screens/queries.ts","navigation/TopTab.tsx","components/ChatMessage/styles.ts","components/ChatMessage/index.tsx","components/ChatInput/styles.ts","src/graphql/mutations.ts","components/ChatInput/index.tsx","screens/ChatRoomScreen.tsx","src/graphql/queries.ts","src/graphql/subscriptions.ts","components/ListOfUsersItem/style.ts","components/ListOfUsersItem/index.tsx","screens/ListOfUsers.tsx","navigation/index.tsx","src/aws-exports.js","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf","node_modules/moment/locale sync /^/.*$","assets/images sync /^/.*/.png$","assets/images/adaptive-icon.png","assets/images/anger.png","assets/images/disgust.png","assets/images/favicon.png","assets/images/fear.png","assets/images/happy.png","assets/images/icon.png","assets/images/nothing.png","assets/images/sad.png","assets/images/splash.png","assets/images/surprise.png"],"names":["useColorScheme","_useColorScheme","light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","theme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","View","backgroundColor","MonoText","fontFamily","EditScreenInfo","path","styles","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","TouchableOpacity","onPress","handleHelpPress","helpLink","helpLinkText","WebBrowser","StyleSheet","create","alignItems","marginHorizontal","marginVertical","borderRadius","paddingHorizontal","fontSize","lineHeight","textAlign","marginTop","paddingVertical","ModalScreen","container","title","separator","StatusBar","Platform","OS","flex","justifyContent","fontWeight","height","width","NotFoundScreen","navigation","replace","link","linkText","padding","linking","prefixes","Linking","config","screens","Root","TabOne","TabOneScreen","TabTwo","TabTwoScreen","Modal","NotFound","avatar","marginRight","flexDirection","picContainer","middleContainer","dateContainer","username","messagePreview","timeRecieved","ChatListItem","chatRoom","user","chatUsers","items","useNavigation","TouchableWithoutFeedback","navigate","id","name","Image","source","uri","imageUri","numberOfLines","lastMessage","content","moment","timestamp","format","ContactsButton","Ionicons","size","ChatsScreen","useState","chatRooms","setChatRooms","useEffect","a","async","Auth","currentAuthenticatedUser","userInfo","API","graphql","graphqlOperation","attributes","sub","userData","data","getUser","console","log","fetchChatRooms","FlatList","renderItem","item","keyExtractor","TopTabs","createMaterialTopTabNavigator","TopTabNavigator","colorScheme","Navigator","initialRouteName","screenOptions","tabBarActiveTintColor","tabBarStyle","tabBarIndicatorStyle","tabBarLabelStyle","tabBarShowIcon","Screen","component","options","messageBox","tinyFace","marginBottom","message","alignSelf","ChatMessage","usersID","messageSent","facialExpression","require","colour","marginLeft","createdAt","fromNow","mainContainer","buttonContainer","textInput","icons","createChatRoomUsers","ChatInput","chatRoomID","setMessage","myUserId","setMyUserId","messageColour","updateLastMessage","messageId","input","lastMessageID","changeMessageColour","alert","changeFacialExpression","face","triggerOnLongPress","onSelect","disabled","FontAwesome5","TextInput","placeholder","multiline","value","onChangeText","userID","chatID","newMessage","createMessage","MaterialCommunityIcons","ChatRoomScreen","route","useRoute","messages","setMessages","myId","setMyID","params","sortDirection","messagesData","messagesByChatRoom","getMessages","getMyID","subscription","subscribe","next","onCreateMessage","unsubscribe","inverted","ListOfUsersItem","newChatRoomData","newChatRoom","createChatRoom","ListOfUsers","users","setUsers","usersData","listUsers","getUsers","Navigation","NavigationContainer","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","createNativeStackNavigator","toLogOut","currentUser","signOut","headerStyle","headerShadowVisible","headerTintColor","headerTitleStyle","headerShown","headerRight","AntDesign","Entypo","MaterialIcons","Group","presentation","awsmobile","Amplify","configure","withAuthenticator","isLoadingComplete","setLoadingComplete","SplashScreen","Font","FontAwesome","font","warn","useCachedResources","bypassCache","newUser","status","fetchUser","module","exports","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve"],"mappings":"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","file":"static/js/app.1fe93831.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","const tintColorLight = '#008069';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import { StatusBar } from 'expo-status-bar';\nimport { Platform, StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function ModalScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Modal</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/ModalScreen.tsx\" />\n\n      {/* Use a light status bar on iOS to account for the black space above the modal */}\n      <StatusBar style={Platform.OS === 'ios' ? 'light' : 'auto'} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport { Text, View } from '../components/Themed';\nimport { RootStackScreenProps } from '../types';\n\nexport default function NotFoundScreen({ navigation }: RootStackScreenProps<'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      Modal: 'modal',\n      NotFound: '*',\n    },\n  },\n};\n\nexport default linking;\n","import { StyleSheet } from \"react-native\";\r\n\r\nconst styles = StyleSheet.create({\r\n    avatar: {\r\n        width: 58, \r\n        height: 58,\r\n        marginRight: 15,\r\n        borderRadius: 60,\r\n    },\r\n\r\n    container: {\r\n        flexDirection: 'row',\r\n        width: \"100%\",\r\n        justifyContent: 'space-between',\r\n        padding: 10,\r\n    },\r\n\r\n    picContainer: {\r\n        flexDirection: 'row'\r\n    },\r\n\r\n    middleContainer: {\r\n        justifyContent: 'space-around'\r\n    },\r\n\r\n    dateContainer: { \r\n        flexDirection: 'row'\r\n    },\r\n\r\n    username: {\r\n        fontWeight: 'bold',\r\n        fontSize: 17\r\n    },\r\n\r\n    messagePreview: {\r\n        fontSize: 16,\r\n        color: 'grey',\r\n        width: '100%',\r\n    },\r\n\r\n    timeRecieved: {\r\n        fontSize:16,\r\n        color: 'grey'\r\n    }\r\n})\r\n\r\nexport default styles; ","import moment from \"moment\";\r\nimport React from \"react\";\r\nimport { View, Text, Image, TouchableWithoutFeedback } from \"react-native\";\r\nimport { ChatRoom } from \"../../types\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\n\r\n\r\nimport styles from \"./style\";\r\n\r\n\r\nexport type ChatListItemProps = {\r\n    chatRoom: ChatRoom;\r\n}\r\n\r\nconst ChatListItem = (props: ChatListItemProps) => {\r\n    const { chatRoom } = props;\r\n\r\n    //const user = chatRoom.chatUsers.items[1];\r\n\r\n    const user = chatRoom.chatUsers.items[0].user;\r\n\r\n    const navigation = useNavigation();\r\n\r\n\r\n    const onClick = () => {\r\n        navigation.navigate(`ChatRoom`, { \r\n        id: chatRoom.id,\r\n        name: user.name })\r\n        \r\n    }\r\n\r\n    return (\r\n        <TouchableWithoutFeedback onPress={onClick}>\r\n        <View style = {styles.container}>\r\n            <View style={styles.picContainer}>\r\n                <Image source={{ uri: user.imageUri }} style  = {styles.avatar}/>\r\n            \r\n\r\n                <View style={styles.middleContainer}>\r\n                <Text style={styles.username}> {user.name}</Text>\r\n                <Text numberOfLines={1} style={styles.messagePreview}>{chatRoom.lastMessage  ? chatRoom.lastMessage.content : \"\"}</Text>\r\n                </View>\r\n            </View>\r\n\r\n            <View style={styles.dateContainer}>\r\n            <Text style={styles.timeRecieved}> \r\n            {chatRoom.lastMessage &&  moment(chatRoom.lastMessage.timestamp).format(\"DD/MM/YYYY\")} \r\n            </Text>  \r\n\r\n            </View>\r\n        </View>\r\n        </TouchableWithoutFeedback>\r\n    )\r\n};\r\n\r\nexport default ChatListItem;","import { StyleSheet } from 'react-native';\r\nimport Colors from '../../constants/Colors';\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        backgroundColor: Colors.light.tint,\r\n        width: 50,\r\n        height: 50, \r\n        borderRadius: 25,\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    }\r\n})\r\n\r\n\r\nexport default styles;","import React from 'react'; \r\nimport { TouchableOpacity, View } from 'react-native';\r\nimport { Ionicons } from '@expo/vector-icons'; \r\nimport styles from './styles';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\n\r\nconst ContactsButton = () => {\r\n    const navigation = useNavigation();\r\n    const onPress = () => {\r\n        navigation.navigate('ListOfUsers')\r\n\r\n    }\r\n\r\n\r\n    return (<View style={styles.container}> \r\n        <TouchableOpacity onPress={onPress}>\r\n        <Ionicons name=\"person-circle\" size={28} color=\"white\" />  \r\n        </TouchableOpacity>\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\nexport default ContactsButton;","import { FlatList, StyleSheet } from 'react-native';\n\nimport { Text, View } from '../components/Themed';\nimport ChatListItem from '../components/ChatListItem';\nimport ContactsButton from '../components/ContactsButton';\nimport { useEffect, useState } from 'react';\nimport { API, graphqlOperation, Auth } from 'aws-amplify'\nimport { getUser } from './queries';\n\nexport default function ChatsScreen() {\n\n    const [ chatRooms, setChatRooms ] = useState([]);\n    useEffect( () => {\n      const fetchChatRooms = async () => {\n        try{\n          const userInfo = await Auth.currentAuthenticatedUser();\n          const userData = await API.graphql(\n            graphqlOperation(getUser, {id: userInfo.attributes.sub})\n          )\n          setChatRooms(userData.data.getUser.chatRooms.items)\n        }catch (e) {\n          console.log(e)\n        }\n      }\n      fetchChatRooms();\n    }, []);\n\n\n    return (\n    <View style={styles.container}>\n      <FlatList style={{ width: '100%'}}\n        data={chatRooms}\n        renderItem={( { item }) => <ChatListItem chatRoom={item.chatRoom} />}\n        keyExtractor={ (item) => item.id}\n      />\n      <ContactsButton /> \n    </View>\n    \n      \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n\n});\n","export const getUser = /* GraphQL */ `\r\n  query GetUser($id: ID!) {\r\n    getUser(id: $id) {\r\n      id\r\n      name\r\n      imageUri\r\n      status\r\n      chatRooms {\r\n        items {\r\n          id\r\n          userID\r\n          chatRoomID\r\n          createdAt\r\n          updatedAt\r\n          chatRoom {\r\n            id\r\n                chatUsers {\r\n                    items {\r\n                        user {\r\n                            id\r\n                            name\r\n                            imageUri\r\n                            status\r\n                        }\r\n                    }\r\n                }\r\n                lastMessage{\r\n                  id\r\n                  content\r\n                  updatedAt\r\n                  user {\r\n                    id\r\n                    name\r\n                  }\r\n                }\r\n        }\r\n          \r\n        }\r\n        nextToken\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;","import { FontAwesome } from '@expo/vector-icons';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';\r\n// import { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs'\r\nimport * as React from 'react';\r\nimport { Pressable } from 'react-native';\r\nimport Colors from '../constants/Colors';\r\nimport useColorScheme from '../hooks/useColorScheme';\r\nimport ChatsScreen from '../screens/ChatScreen';\r\nimport TabOneScreen from '../screens/ChatScreen';\r\nimport TabTwoScreen from '../screens/TabTwoScreen';\r\nimport { TopTabParamList, RootTabScreenProps } from '../types';\r\n\r\n\r\n/**\r\n * A bottom tab navigator displays tab buttons on the bottom of the display to switch screens.\r\n * https://reactnavigation.org/docs/bottom-tab-navigator\r\n */\r\n const TopTabs = createMaterialTopTabNavigator<TopTabParamList>();\r\n export function TopTabNavigator() {\r\n   const colorScheme = useColorScheme();\r\n \r\n   return (\r\n     <TopTabs.Navigator\r\n       initialRouteName=\"Chats\"\r\n       screenOptions={{\r\n         tabBarActiveTintColor: Colors[colorScheme].background,\r\n         tabBarStyle: {\r\n           backgroundColor: '#1c3f89',\r\n         },\r\n         tabBarIndicatorStyle:{\r\n           backgroundColor: Colors[colorScheme].background,\r\n           height: 5,\r\n         },\r\n         tabBarLabelStyle: {\r\n           fontWeight: 'bold'\r\n         },\r\n         tabBarShowIcon: true,\r\n       }}>\r\n       <TopTabs.Screen\r\n         name=\"Chats\"\r\n         component={ChatsScreen}\r\n         options={{\r\n           title: 'CHATS',\r\n         }} />\r\n     </TopTabs.Navigator>\r\n   );\r\n }\r\n /**\r\n  * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/\r\n  */\r\n function TabBarIcon(props: {\r\n   name: React.ComponentProps<typeof FontAwesome>['name'];\r\n   color: string;\r\n }) {\r\n   return <FontAwesome size={30} style={{ marginBottom: -3 }} {...props} />;\r\n }\r\n","import { StyleSheet } from \"react-native\";\r\nimport Colors from \"../../constants/Colors\";\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        padding: 10,\r\n    },\r\n\r\n    messageBox: {\r\n        padding: 10,\r\n        borderRadius: 5,\r\n    \r\n    },\r\n\r\n    tinyFace: {\r\n        width: 100,\r\n        height: 100,\r\n      },\r\n\r\n    name: {\r\n        color: Colors.light.tint,\r\n        fontWeight: \"bold\",\r\n        marginBottom: 5,\r\n    },\r\n\r\n    message: {\r\n\r\n    },\r\n\r\n    timestamp: {\r\n        alignSelf: \"flex-end\"\r\n    },\r\n});\r\n\r\nexport default styles; \r\n\r\n","import React from \"react\";\r\nimport { Message } from \"../../types\";\r\nimport { Text, View, Image } from \"react-native\";\r\nimport moment from \"moment\";\r\nimport styles from \"./styles\";\r\n\r\n\r\nexport type ChatMessageProps = {\r\n    message: Message;\r\n    usersID: string,\r\n    colour: String,\r\n}\r\n\r\n\r\nconst ChatMessage = (props: ChatMessageProps) => {\r\n    \r\n    const { message, usersID } = props; \r\n    const messageSent = () => {\r\n        return message.user.id === usersID;\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}> \r\n            \r\n               {message.facialExpression != 'nothing' ? <Image style ={styles.tinyFace} source={require('../../assets/images/' + message.facialExpression + '.png')} />: null}\r\n        \r\n            <View style={[\r\n                styles.messageBox,\r\n                {backgroundColor: message.colour,\r\n                marginLeft: messageSent() ? 120 : 0,\r\n                marginRight: messageSent() ? 0 : 50}\r\n            ]}>\r\n                {!messageSent() && <Text style={styles.name}> {message.user.name} </Text>}\r\n\r\n                <Text style={{color: message.colour == \"#112ccf\" ? \"white\" : \"black\"}}> {message.content} </Text> \r\n                <Text style={styles.timestamp}> {moment(message.createdAt).fromNow()}</Text>\r\n            </View>\r\n        </View>\r\n        \r\n    )\r\n}\r\n\r\nexport default ChatMessage;","import { StyleSheet } from \"react-native\";\r\nimport Colors from \"../../constants/Colors\";\r\n\r\nconst styles = StyleSheet.create({\r\n\r\n    container: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center'\r\n    },\r\n\r\n    mainContainer: {\r\n        flexDirection: 'row',\r\n        backgroundColor: 'white',\r\n        padding: 10, \r\n        borderRadius: 40,\r\n        flex:1,\r\n        alignItems: 'center'\r\n\r\n    },\r\n\r\n    buttonContainer: {\r\n        backgroundColor: Colors.light.tint,\r\n        borderRadius: 50,\r\n        width: 40, \r\n        height: 40, \r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginHorizontal: 10\r\n    },\r\n\r\n    textInput: {\r\n        flex: 1,\r\n        marginLeft: 10,\r\n        marginRight: 5,\r\n    },\r\n\r\n    icons: {\r\n        marginHorizontal: 4\r\n    }\r\n\r\n\r\n})\r\n\r\n\r\nexport default styles; ","/* tslint:disable */\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createUser = /* GraphQL */ `\n  mutation CreateUser(\n    $input: CreateUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    createUser(input: $input, condition: $condition) {\n      id\n      name\n      imageUri\n      status\n      chatRooms {\n        items {\n          id\n          userID\n          chatRoomID\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateUser = /* GraphQL */ `\n  mutation UpdateUser(\n    $input: UpdateUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    updateUser(input: $input, condition: $condition) {\n      id\n      name\n      imageUri\n      status\n      chatRooms {\n        items {\n          id\n          userID\n          chatRoomID\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteUser = /* GraphQL */ `\n  mutation DeleteUser(\n    $input: DeleteUserInput!\n    $condition: ModelUserConditionInput\n  ) {\n    deleteUser(input: $input, condition: $condition) {\n      id\n      name\n      imageUri\n      status\n      chatRooms {\n        items {\n          id\n          userID\n          chatRoomID\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const createChatRoom = /* GraphQL */ `\n  mutation CreateChatRoom(\n    $input: CreateChatRoomInput!\n    $condition: ModelChatRoomConditionInput\n  ) {\n    createChatRoom(input: $input, condition: $condition) {\n      id\n      chatUsers {\n        items {\n          id\n          userID\n          chatRoomID\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      messages {\n        items {\n          id\n          content\n          createdAt\n          userID\n          colour\n          facialExpression\n          chatID\n          updatedAt\n        }\n        nextToken\n      }\n      lastMessageID\n      lastMessage {\n        id\n        content\n        createdAt\n        userID\n        colour\n        facialExpression\n        user {\n          id\n          name\n          imageUri\n          status\n          createdAt\n          updatedAt\n        }\n        chatID\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateChatRoom = /* GraphQL */ `\n  mutation UpdateChatRoom(\n    $input: UpdateChatRoomInput!\n    $condition: ModelChatRoomConditionInput\n  ) {\n    updateChatRoom(input: $input, condition: $condition) {\n      id\n      chatUsers {\n        items {\n          id\n          userID\n          chatRoomID\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      messages {\n        items {\n          id\n          content\n          createdAt\n          userID\n          colour\n          facialExpression\n          chatID\n          updatedAt\n        }\n        nextToken\n      }\n      lastMessageID\n      lastMessage {\n        id\n        content\n        createdAt\n        userID\n        colour\n        facialExpression\n        user {\n          id\n          name\n          imageUri\n          status\n          createdAt\n          updatedAt\n        }\n        chatID\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteChatRoom = /* GraphQL */ `\n  mutation DeleteChatRoom(\n    $input: DeleteChatRoomInput!\n    $condition: ModelChatRoomConditionInput\n  ) {\n    deleteChatRoom(input: $input, condition: $condition) {\n      id\n      chatUsers {\n        items {\n          id\n          userID\n          chatRoomID\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      messages {\n        items {\n          id\n          content\n          createdAt\n          userID\n          colour\n          facialExpression\n          chatID\n          updatedAt\n        }\n        nextToken\n      }\n      lastMessageID\n      lastMessage {\n        id\n        content\n        createdAt\n        userID\n        colour\n        facialExpression\n        user {\n          id\n          name\n          imageUri\n          status\n          createdAt\n          updatedAt\n        }\n        chatID\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const createMessage = /* GraphQL */ `\n  mutation CreateMessage(\n    $input: CreateMessageInput!\n    $condition: ModelMessageConditionInput\n  ) {\n    createMessage(input: $input, condition: $condition) {\n      id\n      content\n      createdAt\n      userID\n      colour\n      facialExpression\n      user {\n        id\n        name\n        imageUri\n        status\n        chatRooms {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      chatID\n      updatedAt\n    }\n  }\n`;\nexport const updateMessage = /* GraphQL */ `\n  mutation UpdateMessage(\n    $input: UpdateMessageInput!\n    $condition: ModelMessageConditionInput\n  ) {\n    updateMessage(input: $input, condition: $condition) {\n      id\n      content\n      createdAt\n      userID\n      colour\n      facialExpression\n      user {\n        id\n        name\n        imageUri\n        status\n        chatRooms {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      chatID\n      updatedAt\n    }\n  }\n`;\nexport const deleteMessage = /* GraphQL */ `\n  mutation DeleteMessage(\n    $input: DeleteMessageInput!\n    $condition: ModelMessageConditionInput\n  ) {\n    deleteMessage(input: $input, condition: $condition) {\n      id\n      content\n      createdAt\n      userID\n      colour\n      facialExpression\n      user {\n        id\n        name\n        imageUri\n        status\n        chatRooms {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      chatID\n      updatedAt\n    }\n  }\n`;\nexport const createChatRoomUsers = /* GraphQL */ `\n  mutation CreateChatRoomUsers(\n    $input: CreateChatRoomUsersInput!\n    $condition: ModelChatRoomUsersConditionInput\n  ) {\n    createChatRoomUsers(input: $input, condition: $condition) {\n      id\n      userID\n      chatRoomID\n      user {\n        id\n        name\n        imageUri\n        status\n        chatRooms {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      chatRoom {\n        id\n        chatUsers {\n          nextToken\n        }\n        messages {\n          nextToken\n        }\n        lastMessageID\n        lastMessage {\n          id\n          content\n          createdAt\n          userID\n          colour\n          facialExpression\n          chatID\n          updatedAt\n        }\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateChatRoomUsers = /* GraphQL */ `\n  mutation UpdateChatRoomUsers(\n    $input: UpdateChatRoomUsersInput!\n    $condition: ModelChatRoomUsersConditionInput\n  ) {\n    updateChatRoomUsers(input: $input, condition: $condition) {\n      id\n      userID\n      chatRoomID\n      user {\n        id\n        name\n        imageUri\n        status\n        chatRooms {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      chatRoom {\n        id\n        chatUsers {\n          nextToken\n        }\n        messages {\n          nextToken\n        }\n        lastMessageID\n        lastMessage {\n          id\n          content\n          createdAt\n          userID\n          colour\n          facialExpression\n          chatID\n          updatedAt\n        }\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteChatRoomUsers = /* GraphQL */ `\n  mutation DeleteChatRoomUsers(\n    $input: DeleteChatRoomUsersInput!\n    $condition: ModelChatRoomUsersConditionInput\n  ) {\n    deleteChatRoomUsers(input: $input, condition: $condition) {\n      id\n      userID\n      chatRoomID\n      user {\n        id\n        name\n        imageUri\n        status\n        chatRooms {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      chatRoom {\n        id\n        chatUsers {\n          nextToken\n        }\n        messages {\n          nextToken\n        }\n        lastMessageID\n        lastMessage {\n          id\n          content\n          createdAt\n          userID\n          colour\n          facialExpression\n          chatID\n          updatedAt\n        }\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","import { Entypo, FontAwesome5, Fontisto, MaterialCommunityIcons } from \"@expo/vector-icons\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { View, Text, TextInput, TouchableOpacity } from \"react-native\";\r\n\r\nimport styles from \"./styles\";\r\nimport {\r\n    API, \r\n    Auth, \r\n    graphqlOperation,\r\n} from 'aws-amplify';\r\nimport {\r\n    Menu,\r\n    MenuOptions,\r\n    MenuOption,\r\n    MenuTrigger,\r\n  } from 'react-native-popup-menu';\r\nimport { createMessage, updateChatRoom  } from \"../../src/graphql/mutations\";\r\nimport moment from \"moment\";\r\n\r\n\r\nconst ChatInput = (props) => {\r\n    const { chatRoomID } = props; \r\n\r\n    const [message, setMessage] = useState('');\r\n    const [myUserId, setMyUserId] = useState(null);\r\n    var messageColour:string = \"white\";\r\n    var facialExpression:string = \"nothing\";\r\n\r\n    useEffect(() => {\r\n        const getUser  = async () => {\r\n            const userInfo = await Auth.currentAuthenticatedUser();\r\n            setMyUserId(userInfo.attributes.sub);\r\n        }\r\n        getUser();\r\n    }, [])\r\n\r\n    const updateLastMessage = async (messageId: string) => {\r\n        try{\r\n            await API.graphql(\r\n                graphqlOperation(\r\n                    updateChatRoom, {\r\n                        input: { id: chatRoomID, lastMessageID: messageId,}\r\n                    }\r\n                )\r\n            );\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        \r\n    }\r\n\r\n\r\n\r\n    const onSendPress = async () => {\r\n        try {\r\n            if(message == ''){\r\n                return;\r\n            }\r\n            const newMessage = await API.graphql(\r\n                graphqlOperation(\r\n                    createMessage, {\r\n                        input:{\r\n                            content: message,\r\n                            userID: myUserId,\r\n                            chatID: chatRoomID,\r\n                            colour: messageColour,\r\n                            facialExpression: facialExpression,\r\n                        }\r\n                    }\r\n                )\r\n            )\r\n            await updateLastMessage(newMessage.data.createMessage.id);\r\n            setMessage('');\r\n        } catch (e){\r\n            console.log(e);\r\n        }\r\n        \r\n    }\r\n\r\n    const changeMessageColour = (colour) =>{\r\n        messageColour = colour;\r\n        alert(\"Changed colour to \" + colour);\r\n    }\r\n    \r\n    const changeFacialExpression = (face) =>{\r\n        facialExpression = face;\r\n        alert(\"Changed facial expression to \" + face);\r\n    }\r\n\r\n    return(\r\n        <View style={styles.container}>\r\n            <View style={styles.mainContainer}>\r\n            <Menu>\r\n            <MenuTrigger text='   ' triggerOnLongPress={true}/>\r\n            <MenuOptions>\r\n                <MenuOption onSelect={() => changeFacialExpression(`happy`)} text='happy' />\r\n                <MenuOption onSelect={() => changeFacialExpression(`sad`)} text='sad' />\r\n                <MenuOption onSelect={() => changeFacialExpression(`fear`)} text='fear' />\r\n                <MenuOption onSelect={() => changeFacialExpression(`anger`)} text='anger' />\r\n                <MenuOption onSelect={() => changeFacialExpression(`surprise`)} text='surprise' />\r\n                <MenuOption onSelect={() => changeFacialExpression(`disgust`)} text='disgust' />\r\n                <MenuOption onSelect={() => \r\n                    changeMessageColour('#112ccf')} >\r\n                <Text style={{color: '#112ccf'}}>(1) Dark blue</Text>\r\n                </MenuOption>\r\n\r\n                <MenuOption onSelect={() => \r\n                    changeMessageColour('#17dafc')} >\r\n                <Text style={{color: '#17dafc'}}>(2) Light Blue</Text>\r\n                </MenuOption>\r\n\r\n                <MenuOption onSelect={() => \r\n                    changeMessageColour('#e06519')} >\r\n                <Text style={{color: '#e06519'}}>(3) Orange</Text>\r\n                </MenuOption>\r\n\r\n\r\n                <MenuOption onSelect={() => \r\n                    changeMessageColour('#ed0707')} >\r\n                <Text style={{color: '#ed0707'}}>(4) Red</Text>\r\n                </MenuOption>\r\n                <MenuOption onSelect={() => alert(`Not called`)} disabled={true} text='Disabled' />\r\n            </MenuOptions>\r\n            </Menu>\r\n            <FontAwesome5 name=\"laugh-beam\" size={25} color=\"grey\" />\r\n            <TextInput style={styles.textInput} placeholder={\"Type a message...\"} multiline numberOfLines={2} value = {message} onChangeText= {setMessage} />\r\n            </View>\r\n           <TouchableOpacity onPress={onSendPress}>\r\n           <View style={styles.buttonContainer}>\r\n               <MaterialCommunityIcons name=\"send\" size={24} color=\"white\"/>\r\n           </View>\r\n           </TouchableOpacity>\r\n        </View>\r\n    )\r\n    \r\n}\r\n\r\n\r\nexport default ChatInput;","import React, { useEffect, useState } from \"react\";\r\nimport { FlatList } from 'react-native';\r\n\r\nimport { useRoute } from \"@react-navigation/native\";\r\nimport ChatMessage from \"../components/ChatMessage\";\r\nimport ChatInput from \"../components/ChatInput\";\r\nimport { onCreateMessage } from \"../src/graphql/subscriptions\";\r\n\r\nimport {\r\n    API, \r\n    Auth, \r\n    graphqlOperation\r\n} from 'aws-amplify'\r\n\r\nimport { messagesByChatRoom } from \"../src/graphql/queries\";\r\n\r\nconst ChatRoomScreen = () => {\r\n    // Gives each chat an ID\r\n    const route = useRoute() ;\r\n    \r\n    const [messages, setMessages] = useState([]);\r\n    const [myId, setMyID] = useState([]);\r\n\r\n    useEffect( () => {\r\n        const getMessages = async () => {\r\n            const messagesData = await API.graphql(\r\n                graphqlOperation(\r\n                    messagesByChatRoom, {\r\n                        chatID: route.params.id,\r\n                        sortDirection: \"DESC\",\r\n                    }\r\n                )\r\n            )\r\n            setMessages(messagesData.data.messagesByChatRoom.items)\r\n        }\r\n        getMessages();\r\n    }, [])\r\n\r\n    useEffect( () => {\r\n        const getMyID = async () => {\r\n            const userInfo = await Auth.currentAuthenticatedUser();\r\n            setMyID(userInfo.attributes.sub);\r\n        }\r\n        getMyID();\r\n    }, [])\r\n\r\n    useEffect( () => {\r\n        const subscription = API.graphql(\r\n            graphqlOperation(onCreateMessage)\r\n        ).subscribe({\r\n            next: (data) => {\r\n                const newMessage = data.value.data.onCreateMessage;\r\n\r\n                if (newMessage.chatID !== route.params.id) {\r\n                    return\r\n                }\r\n                setMessages([newMessage, ...messages]);\r\n            }\r\n        }); \r\n\r\n        return () => subscription.unsubscribe();\r\n    }, [messages])\r\n\r\n    return (\r\n        <>\r\n        <FlatList \r\n        data={messages} \r\n        renderItem={( { item } ) => \r\n        <ChatMessage usersID = {myId} message={item} />} \r\n        inverted \r\n        />\r\n        <ChatInput chatRoomID={route.params.id}/>\r\n        </>\r\n        );\r\n\r\n        \r\n      \r\n}\r\n\r\nexport default ChatRoomScreen;","/* tslint:disable */\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getUser = /* GraphQL */ `\n  query GetUser($id: ID!) {\n    getUser(id: $id) {\n      id\n      name\n      imageUri\n      status\n      chatRooms {\n        items {\n          id\n          userID\n          chatRoomID\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listUsers = /* GraphQL */ `\n  query ListUsers(\n    $filter: ModelUserFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        name\n        imageUri\n        status\n        chatRooms {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\nexport const getChatRoom = /* GraphQL */ `\n  query GetChatRoom($id: ID!) {\n    getChatRoom(id: $id) {\n      id\n      chatUsers {\n        items {\n          id\n          userID\n          chatRoomID\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      messages {\n        items {\n          id\n          content\n          createdAt\n          userID\n          colour\n          facialExpression\n          chatID\n          updatedAt\n        }\n        nextToken\n      }\n      lastMessageID\n      lastMessage {\n        id\n        content\n        createdAt\n        userID\n        colour\n        facialExpression\n        user {\n          id\n          name\n          imageUri\n          status\n          createdAt\n          updatedAt\n        }\n        chatID\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listChatRooms = /* GraphQL */ `\n  query ListChatRooms(\n    $filter: ModelChatRoomFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listChatRooms(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        chatUsers {\n          nextToken\n        }\n        messages {\n          nextToken\n        }\n        lastMessageID\n        lastMessage {\n          id\n          content\n          createdAt\n          userID\n          colour\n          facialExpression\n          chatID\n          updatedAt\n        }\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\nexport const getMessage = /* GraphQL */ `\n  query GetMessage($id: ID!) {\n    getMessage(id: $id) {\n      id\n      content\n      createdAt\n      userID\n      colour\n      facialExpression\n      user {\n        id\n        name\n        imageUri\n        status\n        chatRooms {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      chatID\n      updatedAt\n    }\n  }\n`;\nexport const listMessages = /* GraphQL */ `\n  query ListMessages(\n    $filter: ModelMessageFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listMessages(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        content\n        createdAt\n        userID\n        colour\n        facialExpression\n        user {\n          id\n          name\n          imageUri\n          status\n          createdAt\n          updatedAt\n        }\n        chatID\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\nexport const getChatRoomUsers = /* GraphQL */ `\n  query GetChatRoomUsers($id: ID!) {\n    getChatRoomUsers(id: $id) {\n      id\n      userID\n      chatRoomID\n      user {\n        id\n        name\n        imageUri\n        status\n        chatRooms {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      chatRoom {\n        id\n        chatUsers {\n          nextToken\n        }\n        messages {\n          nextToken\n        }\n        lastMessageID\n        lastMessage {\n          id\n          content\n          createdAt\n          userID\n          colour\n          facialExpression\n          chatID\n          updatedAt\n        }\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listChatRoomUsers = /* GraphQL */ `\n  query ListChatRoomUsers(\n    $filter: ModelChatRoomUsersFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listChatRoomUsers(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        userID\n        chatRoomID\n        user {\n          id\n          name\n          imageUri\n          status\n          createdAt\n          updatedAt\n        }\n        chatRoom {\n          id\n          lastMessageID\n          createdAt\n          updatedAt\n        }\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\nexport const messagesByChatRoom = /* GraphQL */ `\n  query MessagesByChatRoom(\n    $chatID: ID!\n    $createdAt: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelMessageFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    messagesByChatRoom(\n      chatID: $chatID\n      createdAt: $createdAt\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        content\n        createdAt\n        userID\n        colour\n        facialExpression\n        user {\n          id\n          name\n          imageUri\n          status\n          createdAt\n          updatedAt\n        }\n        chatID\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n","/* tslint:disable */\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateUser = /* GraphQL */ `\n  subscription OnCreateUser {\n    onCreateUser {\n      id\n      name\n      imageUri\n      status\n      chatRooms {\n        items {\n          id\n          userID\n          chatRoomID\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdateUser = /* GraphQL */ `\n  subscription OnUpdateUser {\n    onUpdateUser {\n      id\n      name\n      imageUri\n      status\n      chatRooms {\n        items {\n          id\n          userID\n          chatRoomID\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeleteUser = /* GraphQL */ `\n  subscription OnDeleteUser {\n    onDeleteUser {\n      id\n      name\n      imageUri\n      status\n      chatRooms {\n        items {\n          id\n          userID\n          chatRoomID\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onCreateChatRoom = /* GraphQL */ `\n  subscription OnCreateChatRoom {\n    onCreateChatRoom {\n      id\n      chatUsers {\n        items {\n          id\n          userID\n          chatRoomID\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      messages {\n        items {\n          id\n          content\n          createdAt\n          userID\n          colour\n          facialExpression\n          chatID\n          updatedAt\n        }\n        nextToken\n      }\n      lastMessageID\n      lastMessage {\n        id\n        content\n        createdAt\n        userID\n        colour\n        facialExpression\n        user {\n          id\n          name\n          imageUri\n          status\n          createdAt\n          updatedAt\n        }\n        chatID\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdateChatRoom = /* GraphQL */ `\n  subscription OnUpdateChatRoom {\n    onUpdateChatRoom {\n      id\n      chatUsers {\n        items {\n          id\n          userID\n          chatRoomID\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      messages {\n        items {\n          id\n          content\n          createdAt\n          userID\n          colour\n          facialExpression\n          chatID\n          updatedAt\n        }\n        nextToken\n      }\n      lastMessageID\n      lastMessage {\n        id\n        content\n        createdAt\n        userID\n        colour\n        facialExpression\n        user {\n          id\n          name\n          imageUri\n          status\n          createdAt\n          updatedAt\n        }\n        chatID\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeleteChatRoom = /* GraphQL */ `\n  subscription OnDeleteChatRoom {\n    onDeleteChatRoom {\n      id\n      chatUsers {\n        items {\n          id\n          userID\n          chatRoomID\n          createdAt\n          updatedAt\n        }\n        nextToken\n      }\n      messages {\n        items {\n          id\n          content\n          createdAt\n          userID\n          colour\n          facialExpression\n          chatID\n          updatedAt\n        }\n        nextToken\n      }\n      lastMessageID\n      lastMessage {\n        id\n        content\n        createdAt\n        userID\n        colour\n        facialExpression\n        user {\n          id\n          name\n          imageUri\n          status\n          createdAt\n          updatedAt\n        }\n        chatID\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onCreateMessage = /* GraphQL */ `\n  subscription OnCreateMessage {\n    onCreateMessage {\n      id\n      content\n      createdAt\n      userID\n      colour\n      facialExpression\n      user {\n        id\n        name\n        imageUri\n        status\n        chatRooms {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      chatID\n      updatedAt\n    }\n  }\n`;\nexport const onUpdateMessage = /* GraphQL */ `\n  subscription OnUpdateMessage {\n    onUpdateMessage {\n      id\n      content\n      createdAt\n      userID\n      colour\n      facialExpression\n      user {\n        id\n        name\n        imageUri\n        status\n        chatRooms {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      chatID\n      updatedAt\n    }\n  }\n`;\nexport const onDeleteMessage = /* GraphQL */ `\n  subscription OnDeleteMessage {\n    onDeleteMessage {\n      id\n      content\n      createdAt\n      userID\n      colour\n      facialExpression\n      user {\n        id\n        name\n        imageUri\n        status\n        chatRooms {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      chatID\n      updatedAt\n    }\n  }\n`;\nexport const onCreateChatRoomUsers = /* GraphQL */ `\n  subscription OnCreateChatRoomUsers {\n    onCreateChatRoomUsers {\n      id\n      userID\n      chatRoomID\n      user {\n        id\n        name\n        imageUri\n        status\n        chatRooms {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      chatRoom {\n        id\n        chatUsers {\n          nextToken\n        }\n        messages {\n          nextToken\n        }\n        lastMessageID\n        lastMessage {\n          id\n          content\n          createdAt\n          userID\n          colour\n          facialExpression\n          chatID\n          updatedAt\n        }\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdateChatRoomUsers = /* GraphQL */ `\n  subscription OnUpdateChatRoomUsers {\n    onUpdateChatRoomUsers {\n      id\n      userID\n      chatRoomID\n      user {\n        id\n        name\n        imageUri\n        status\n        chatRooms {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      chatRoom {\n        id\n        chatUsers {\n          nextToken\n        }\n        messages {\n          nextToken\n        }\n        lastMessageID\n        lastMessage {\n          id\n          content\n          createdAt\n          userID\n          colour\n          facialExpression\n          chatID\n          updatedAt\n        }\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeleteChatRoomUsers = /* GraphQL */ `\n  subscription OnDeleteChatRoomUsers {\n    onDeleteChatRoomUsers {\n      id\n      userID\n      chatRoomID\n      user {\n        id\n        name\n        imageUri\n        status\n        chatRooms {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      chatRoom {\n        id\n        chatUsers {\n          nextToken\n        }\n        messages {\n          nextToken\n        }\n        lastMessageID\n        lastMessage {\n          id\n          content\n          createdAt\n          userID\n          colour\n          facialExpression\n          chatID\n          updatedAt\n        }\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","import { StyleSheet } from \"react-native\";\r\n\r\nconst styles = StyleSheet.create({\r\n    avatar: {\r\n        width: 58, \r\n        height: 58,\r\n        marginRight: 15,\r\n        borderRadius: 60,\r\n    },\r\n\r\n    container: {\r\n        flexDirection: 'row',\r\n        width: \"100%\",\r\n        justifyContent: 'space-between',\r\n        padding: 10,\r\n    },\r\n\r\n    picContainer: {\r\n        flexDirection: 'row'\r\n    },\r\n\r\n    middleContainer: {\r\n        justifyContent: 'space-around'\r\n    },\r\n\r\n    dateContainer: { \r\n        flexDirection: 'row'\r\n    },\r\n\r\n    username: {\r\n        fontWeight: 'bold',\r\n        fontSize: 17\r\n    },\r\n})\r\n\r\nexport default styles; ","import moment from \"moment\";\r\nimport React from \"react\";\r\nimport { View, Text, Image, TouchableWithoutFeedback } from \"react-native\";\r\nimport { ChatRoom, User } from \"../../types\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\n\r\nimport { graphqlOperation, API, Auth } from \"aws-amplify\";\r\nimport { createChatRoom, createChatRoomUsers } from '../../src/graphql/mutations'\r\n\r\nimport styles from \"./style\";\r\n\r\n\r\nexport type ListOfUsersProps = {\r\n    user: User;\r\n}\r\n\r\nconst ListOfUsersItem = (props: ListOfUsersProps) => {\r\n    const { user } = props;\r\n\r\n    const navigation = useNavigation();\r\n\r\n    const onClick = async () => {\r\n        try{\r\n            // create a chat room\r\n            const newChatRoomData = await API.graphql(\r\n                graphqlOperation(\r\n                    createChatRoom, { input: {} }\r\n                )\r\n            )\r\n                \r\n            if (!newChatRoomData.data){\r\n                console.log(\"Error creating chat room\");\r\n                return ;\r\n            }\r\n            \r\n            const newChatRoom = newChatRoomData.data.createChatRoom;\r\n\r\n            // add user to the chat\r\n            await API.graphql(\r\n                graphqlOperation(\r\n                    createChatRoomUsers,{\r\n                        input:{\r\n                            userID: user.id,\r\n                            chatRoomID: newChatRoom.id\r\n                        }\r\n                        \r\n                    }\r\n                )\r\n            )\r\n            \r\n            // add other user to the chatroom\r\n            const userInfo = await Auth.currentAuthenticatedUser();\r\n            await API.graphql(\r\n                graphqlOperation(\r\n                    createChatRoomUsers, {\r\n                        input:{\r\n                            userID: userInfo.attributes.sub,\r\n                            chatRoomID: newChatRoom.id,\r\n                        }\r\n\r\n                    }\r\n                )\r\n            )\r\n\r\n            navigation.navigate('ChatRoom', {\r\n                id: newChatRoom.id,\r\n                name: \"Visitor\",\r\n            })\r\n\r\n        }catch (e){\r\n            console.log(e);\r\n        }\r\n\r\n    }\r\n    \r\n    return (\r\n        <TouchableWithoutFeedback onPress={onClick}>\r\n        <View style={styles.picContainer}>\r\n                <Image source={{ uri: user.imageUri }} style  = {styles.avatar}/>\r\n                <View style={styles.middleContainer}>\r\n                <Text style={styles.username}> {user.name}</Text>\r\n                </View>\r\n            </View>\r\n        </TouchableWithoutFeedback>\r\n    )\r\n};\r\n\r\nexport default ListOfUsersItem;","import { API, graphqlOperation } from \"aws-amplify\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { FlatList, View } from \"react-native\";\r\nimport styles from \"../components/ChatListItem/style\";\r\nimport ListOfUsersItem from \"../components/ListOfUsersItem\";\r\nimport DummyUsers from '../dummyData/DummyUsers';\r\nimport { listUsers } from \"../src/graphql/queries\";\r\n\r\nexport default function ListOfUsers() {\r\n\r\n    const [users, setUsers] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getUsers = async () => {\r\n            try{\r\n                const usersData = await API.graphql(\r\n                    graphqlOperation(\r\n                        listUsers\r\n                    )\r\n                )\r\n                setUsers(usersData.data.listUsers.items);\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n        getUsers();\r\n    }, [])\r\n    return (\r\n        <View style={styles.container}>\r\n            <FlatList\r\n                style={{width: '100%'}}\r\n                data={users}\r\n                renderItem={({ item }) => <ListOfUsersItem user={item} />}\r\n                keyExtractor={( item ) => item.id}\r\n            />\r\n        </View>\r\n    );\r\n\r\n}","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport * as React from 'react';\nimport { ColorPropType, ColorSchemeName, TouchableOpacity, View } from 'react-native';\nimport { AntDesign, Entypo, FontAwesome5, MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons';\n\nimport Colors from '../constants/Colors';\nimport ModalScreen from '../screens/ModalScreen';\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { RootStackParamList } from '../types';\nimport LinkingConfiguration from './LinkingConfiguration';\nimport { TopTabNavigator } from './TopTab';\nimport ChatRoomScreen from '../screens/ChatRoomScreen'\nimport ListOfUsers from '../screens/ListOfUsers';\nimport { API, Auth, graphqlOperation } from 'aws-amplify';\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n/**\n * A root stack navigator is often used for displaying modals on top of all other content.\n * https://reactnavigation.org/docs/modal\n */\nconst Stack = createNativeStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n\n  const toLogOut = async () => {\n    const currentUser = await Auth.currentAuthenticatedUser()\n    Auth.signOut(currentUser)\n  }\n  \n\n  return (\n    <Stack.Navigator screenOptions={{\n      headerStyle: {\n        backgroundColor: '#1c3f89',\n      },\n      headerShadowVisible: false,\n      headerTintColor: Colors.light.background,\n      headerTitleStyle: {\n        fontWeight: 'bold',\n      }\n    }}>\n      <Stack.Screen name=\"Root\" component={TopTabNavigator} options={{ \n        headerShown: true,\n        // Name of app appearing at top of screen (May change down the line)\n        title: \"Glasgow Students' Nightline\",\n        // search picture and 3 dots\n        headerRight: () => (\n          <View style= {{flexDirection: 'row', width: 69, justifyContent: 'space-between', marginRight: 6}}> \n            <AntDesign name=\"search1\" size={20} color=\"white\" />\n            <TouchableOpacity onPress={toLogOut}>\n            <Entypo name=\"log-out\" size={20} color=\"white\" />\n            </TouchableOpacity>\n          </View>\n        )\n        \n        }} />\n      <Stack.Screen \n      name=\"ChatRoom\" \n      component={ChatRoomScreen} \n      options={( {route }) => ({\n        title: \"Visitor\",     \n        // headerLeft: route.params.users[0].imageUri,\n        //headerBackImageSource: route.params.users[0].imageUri,\n        headerRight: () => (\n          <View style={{\n            flexDirection: 'row',\n            width: 100,\n            justifyContent:  `space-between`,\n            marginRight: 10,\n          }}>\n            <MaterialIcons name=\"call\" size={22} color={`white`} />\n            <FontAwesome5 name=\"video\" size={22} color={`white`} />\n            <MaterialCommunityIcons name=\"dots-vertical\" size={22} color={`white`} />\n          </View>\n        )\n      })} /> \n\n      <Stack.Screen name=\"ListOfUsers\" component={ListOfUsers}/>\n\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n      <Stack.Group screenOptions={{ presentation: 'modal' }}>\n        <Stack.Screen name=\"Modal\" component={ModalScreen} />\n      </Stack.Group>\n    </Stack.Navigator>\n  );\n}\n\n\n\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"eu-west-2\",\n    \"aws_cognito_identity_pool_id\": \"eu-west-2:0967090a-7c8e-4392-87bb-9bc8b1a81adc\",\n    \"aws_cognito_region\": \"eu-west-2\",\n    \"aws_user_pools_id\": \"eu-west-2_t25x0zxUR\",\n    \"aws_user_pools_web_client_id\": \"15dgp5mrkvrqolnprth6jcbcu9\",\n    \"oauth\": {},\n    \"aws_cognito_username_attributes\": [],\n    \"aws_cognito_social_providers\": [],\n    \"aws_cognito_signup_attributes\": [\n        \"EMAIL\"\n    ],\n    \"aws_cognito_mfa_configuration\": \"OFF\",\n    \"aws_cognito_mfa_types\": [\n        \"SMS\"\n    ],\n    \"aws_cognito_password_protection_settings\": {\n        \"passwordPolicyMinLength\": 8,\n        \"passwordPolicyCharacters\": []\n    },\n    \"aws_cognito_verification_mechanisms\": [\n        \"EMAIL\"\n    ],\n    \"aws_appsync_graphqlEndpoint\": \"https://mm37p7jmuvajzeui7omobbymeu.appsync-api.eu-west-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"eu-west-2\",\n    \"aws_appsync_authenticationType\": \"AMAZON_COGNITO_USER_POOLS\",\n    \"aws_appsync_apiKey\": \"da2-rnus4oem7vggtjf3nowjxko73y\"\n};\n\n\nexport default awsmobile;\n","import { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nimport {Auth,\n  API, \n  graphqlOperation\n} from 'aws-amplify';\n\nimport config from './src/aws-exports'\n\nimport { getUser } from './src/graphql/queries';\nimport { createUser } from './src/graphql/mutations';\n\nimport { withAuthenticator } from 'aws-amplify-react-native'\nimport Amplify from 'aws-amplify'\nimport { useEffect } from 'react';\nimport { UserInterfaceIdiom } from 'expo-constants';\nimport { MenuProvider } from 'react-native-popup-menu';\nAmplify.configure(config)\n\n\nfunction App() {\n  \n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n  useEffect( () => {\n    // Get the account that is signed in. If not in the database, make new database entry. If already exists, then all is okay!\n    const fetchUser = async () => {\n      const userInfo = await Auth.currentAuthenticatedUser( {bypassCache: true})\n\n      if (userInfo){\n      const userData = await API.graphql(graphqlOperation(getUser, { id: userInfo.attributes.sub }))\n\n     if (userData.data.getUser ) {\n       console.log(\"User previously registered\");\n        return;\n     }\n\n     const newUser = {\n       id: userInfo.attributes.sub,\n       name: userInfo.username,\n       imageUri: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRRaD2U5l8Wq1og0jp9G4hau7DAUCfb9RzkyA&usqp=CAU', \n       status: 'Caller waiting in queue', \n     }\n\n     await API.graphql(\n       graphqlOperation(\n         createUser, { input: newUser }\n       )\n     )\n    }\n\n  }\n    fetchUser();\n  }, [])\n\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <MenuProvider>\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n      </MenuProvider>\n    );\n  \n  }\n\n}\n\nexport default withAuthenticator(App)","import { FontAwesome } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect, useState } from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...FontAwesome.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","var map = {\n\t\"./af\": 263,\n\t\"./af.js\": 263,\n\t\"./ar\": 264,\n\t\"./ar-dz\": 265,\n\t\"./ar-dz.js\": 265,\n\t\"./ar-kw\": 266,\n\t\"./ar-kw.js\": 266,\n\t\"./ar-ly\": 267,\n\t\"./ar-ly.js\": 267,\n\t\"./ar-ma\": 268,\n\t\"./ar-ma.js\": 268,\n\t\"./ar-sa\": 269,\n\t\"./ar-sa.js\": 269,\n\t\"./ar-tn\": 270,\n\t\"./ar-tn.js\": 270,\n\t\"./ar.js\": 264,\n\t\"./az\": 271,\n\t\"./az.js\": 271,\n\t\"./be\": 272,\n\t\"./be.js\": 272,\n\t\"./bg\": 273,\n\t\"./bg.js\": 273,\n\t\"./bm\": 274,\n\t\"./bm.js\": 274,\n\t\"./bn\": 275,\n\t\"./bn-bd\": 276,\n\t\"./bn-bd.js\": 276,\n\t\"./bn.js\": 275,\n\t\"./bo\": 277,\n\t\"./bo.js\": 277,\n\t\"./br\": 278,\n\t\"./br.js\": 278,\n\t\"./bs\": 279,\n\t\"./bs.js\": 279,\n\t\"./ca\": 280,\n\t\"./ca.js\": 280,\n\t\"./cs\": 281,\n\t\"./cs.js\": 281,\n\t\"./cv\": 282,\n\t\"./cv.js\": 282,\n\t\"./cy\": 283,\n\t\"./cy.js\": 283,\n\t\"./da\": 284,\n\t\"./da.js\": 284,\n\t\"./de\": 285,\n\t\"./de-at\": 286,\n\t\"./de-at.js\": 286,\n\t\"./de-ch\": 287,\n\t\"./de-ch.js\": 287,\n\t\"./de.js\": 285,\n\t\"./dv\": 288,\n\t\"./dv.js\": 288,\n\t\"./el\": 289,\n\t\"./el.js\": 289,\n\t\"./en-au\": 290,\n\t\"./en-au.js\": 290,\n\t\"./en-ca\": 291,\n\t\"./en-ca.js\": 291,\n\t\"./en-gb\": 292,\n\t\"./en-gb.js\": 292,\n\t\"./en-ie\": 293,\n\t\"./en-ie.js\": 293,\n\t\"./en-il\": 294,\n\t\"./en-il.js\": 294,\n\t\"./en-in\": 295,\n\t\"./en-in.js\": 295,\n\t\"./en-nz\": 296,\n\t\"./en-nz.js\": 296,\n\t\"./en-sg\": 297,\n\t\"./en-sg.js\": 297,\n\t\"./eo\": 298,\n\t\"./eo.js\": 298,\n\t\"./es\": 299,\n\t\"./es-do\": 300,\n\t\"./es-do.js\": 300,\n\t\"./es-mx\": 301,\n\t\"./es-mx.js\": 301,\n\t\"./es-us\": 302,\n\t\"./es-us.js\": 302,\n\t\"./es.js\": 299,\n\t\"./et\": 303,\n\t\"./et.js\": 303,\n\t\"./eu\": 304,\n\t\"./eu.js\": 304,\n\t\"./fa\": 305,\n\t\"./fa.js\": 305,\n\t\"./fi\": 306,\n\t\"./fi.js\": 306,\n\t\"./fil\": 307,\n\t\"./fil.js\": 307,\n\t\"./fo\": 308,\n\t\"./fo.js\": 308,\n\t\"./fr\": 309,\n\t\"./fr-ca\": 310,\n\t\"./fr-ca.js\": 310,\n\t\"./fr-ch\": 311,\n\t\"./fr-ch.js\": 311,\n\t\"./fr.js\": 309,\n\t\"./fy\": 312,\n\t\"./fy.js\": 312,\n\t\"./ga\": 313,\n\t\"./ga.js\": 313,\n\t\"./gd\": 314,\n\t\"./gd.js\": 314,\n\t\"./gl\": 315,\n\t\"./gl.js\": 315,\n\t\"./gom-deva\": 316,\n\t\"./gom-deva.js\": 316,\n\t\"./gom-latn\": 317,\n\t\"./gom-latn.js\": 317,\n\t\"./gu\": 318,\n\t\"./gu.js\": 318,\n\t\"./he\": 319,\n\t\"./he.js\": 319,\n\t\"./hi\": 320,\n\t\"./hi.js\": 320,\n\t\"./hr\": 321,\n\t\"./hr.js\": 321,\n\t\"./hu\": 322,\n\t\"./hu.js\": 322,\n\t\"./hy-am\": 323,\n\t\"./hy-am.js\": 323,\n\t\"./id\": 324,\n\t\"./id.js\": 324,\n\t\"./is\": 325,\n\t\"./is.js\": 325,\n\t\"./it\": 326,\n\t\"./it-ch\": 327,\n\t\"./it-ch.js\": 327,\n\t\"./it.js\": 326,\n\t\"./ja\": 328,\n\t\"./ja.js\": 328,\n\t\"./jv\": 329,\n\t\"./jv.js\": 329,\n\t\"./ka\": 330,\n\t\"./ka.js\": 330,\n\t\"./kk\": 331,\n\t\"./kk.js\": 331,\n\t\"./km\": 332,\n\t\"./km.js\": 332,\n\t\"./kn\": 333,\n\t\"./kn.js\": 333,\n\t\"./ko\": 334,\n\t\"./ko.js\": 334,\n\t\"./ku\": 335,\n\t\"./ku.js\": 335,\n\t\"./ky\": 336,\n\t\"./ky.js\": 336,\n\t\"./lb\": 337,\n\t\"./lb.js\": 337,\n\t\"./lo\": 338,\n\t\"./lo.js\": 338,\n\t\"./lt\": 339,\n\t\"./lt.js\": 339,\n\t\"./lv\": 340,\n\t\"./lv.js\": 340,\n\t\"./me\": 341,\n\t\"./me.js\": 341,\n\t\"./mi\": 342,\n\t\"./mi.js\": 342,\n\t\"./mk\": 343,\n\t\"./mk.js\": 343,\n\t\"./ml\": 344,\n\t\"./ml.js\": 344,\n\t\"./mn\": 345,\n\t\"./mn.js\": 345,\n\t\"./mr\": 346,\n\t\"./mr.js\": 346,\n\t\"./ms\": 347,\n\t\"./ms-my\": 348,\n\t\"./ms-my.js\": 348,\n\t\"./ms.js\": 347,\n\t\"./mt\": 349,\n\t\"./mt.js\": 349,\n\t\"./my\": 350,\n\t\"./my.js\": 350,\n\t\"./nb\": 351,\n\t\"./nb.js\": 351,\n\t\"./ne\": 352,\n\t\"./ne.js\": 352,\n\t\"./nl\": 353,\n\t\"./nl-be\": 354,\n\t\"./nl-be.js\": 354,\n\t\"./nl.js\": 353,\n\t\"./nn\": 355,\n\t\"./nn.js\": 355,\n\t\"./oc-lnc\": 356,\n\t\"./oc-lnc.js\": 356,\n\t\"./pa-in\": 357,\n\t\"./pa-in.js\": 357,\n\t\"./pl\": 358,\n\t\"./pl.js\": 358,\n\t\"./pt\": 359,\n\t\"./pt-br\": 360,\n\t\"./pt-br.js\": 360,\n\t\"./pt.js\": 359,\n\t\"./ro\": 361,\n\t\"./ro.js\": 361,\n\t\"./ru\": 362,\n\t\"./ru.js\": 362,\n\t\"./sd\": 363,\n\t\"./sd.js\": 363,\n\t\"./se\": 364,\n\t\"./se.js\": 364,\n\t\"./si\": 365,\n\t\"./si.js\": 365,\n\t\"./sk\": 366,\n\t\"./sk.js\": 366,\n\t\"./sl\": 367,\n\t\"./sl.js\": 367,\n\t\"./sq\": 368,\n\t\"./sq.js\": 368,\n\t\"./sr\": 369,\n\t\"./sr-cyrl\": 370,\n\t\"./sr-cyrl.js\": 370,\n\t\"./sr.js\": 369,\n\t\"./ss\": 371,\n\t\"./ss.js\": 371,\n\t\"./sv\": 372,\n\t\"./sv.js\": 372,\n\t\"./sw\": 373,\n\t\"./sw.js\": 373,\n\t\"./ta\": 374,\n\t\"./ta.js\": 374,\n\t\"./te\": 375,\n\t\"./te.js\": 375,\n\t\"./tet\": 376,\n\t\"./tet.js\": 376,\n\t\"./tg\": 377,\n\t\"./tg.js\": 377,\n\t\"./th\": 378,\n\t\"./th.js\": 378,\n\t\"./tk\": 379,\n\t\"./tk.js\": 379,\n\t\"./tl-ph\": 380,\n\t\"./tl-ph.js\": 380,\n\t\"./tlh\": 381,\n\t\"./tlh.js\": 381,\n\t\"./tr\": 382,\n\t\"./tr.js\": 382,\n\t\"./tzl\": 383,\n\t\"./tzl.js\": 383,\n\t\"./tzm\": 384,\n\t\"./tzm-latn\": 385,\n\t\"./tzm-latn.js\": 385,\n\t\"./tzm.js\": 384,\n\t\"./ug-cn\": 386,\n\t\"./ug-cn.js\": 386,\n\t\"./uk\": 387,\n\t\"./uk.js\": 387,\n\t\"./ur\": 388,\n\t\"./ur.js\": 388,\n\t\"./uz\": 389,\n\t\"./uz-latn\": 390,\n\t\"./uz-latn.js\": 390,\n\t\"./uz.js\": 389,\n\t\"./vi\": 391,\n\t\"./vi.js\": 391,\n\t\"./x-pseudo\": 392,\n\t\"./x-pseudo.js\": 392,\n\t\"./yo\": 393,\n\t\"./yo.js\": 393,\n\t\"./zh-cn\": 394,\n\t\"./zh-cn.js\": 394,\n\t\"./zh-hk\": 395,\n\t\"./zh-hk.js\": 395,\n\t\"./zh-mo\": 396,\n\t\"./zh-mo.js\": 396,\n\t\"./zh-tw\": 397,\n\t\"./zh-tw.js\": 397\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 585;","var map = {\n\t\"./adaptive-icon.png\": 649,\n\t\"./anger.png\": 650,\n\t\"./disgust.png\": 651,\n\t\"./favicon.png\": 652,\n\t\"./fear.png\": 653,\n\t\"./happy.png\": 654,\n\t\"./icon.png\": 655,\n\t\"./nothing.png\": 656,\n\t\"./sad.png\": 657,\n\t\"./splash.png\": 658,\n\t\"./surprise.png\": 659\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 648;","module.exports = __webpack_public_path__ + \"static/media/adaptive-icon.e4e80208.png\";","module.exports = __webpack_public_path__ + \"static/media/anger.5166532b.png\";","module.exports = __webpack_public_path__ + \"static/media/disgust.db8ab1c6.png\";","module.exports = __webpack_public_path__ + \"static/media/favicon.fa4783d1.png\";","module.exports = __webpack_public_path__ + \"static/media/fear.5ca7021a.png\";","module.exports = __webpack_public_path__ + \"static/media/happy.4f35b627.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.608e4d9d.png\";","module.exports = __webpack_public_path__ + \"static/media/nothing.d4bd45e5.png\";","module.exports = __webpack_public_path__ + \"static/media/sad.0888cc08.png\";","module.exports = __webpack_public_path__ + \"static/media/splash.59202d46.png\";","module.exports = __webpack_public_path__ + \"static/media/surprise.9b053562.png\";"],"sourceRoot":""}